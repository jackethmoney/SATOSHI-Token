(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('web3-core-helpers'), require('@rsksmart/rsk3-utils'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('web3-core-method'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('@babel/runtime/helpers/createClass'), require('web3-core'), require('lodash/isFunction')) :
    typeof define === 'function' && define.amd ? define(['exports', 'web3-core-helpers', '@rsksmart/rsk3-utils', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'web3-core-method', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', '@babel/runtime/helpers/createClass', 'web3-core', 'lodash/isFunction'], factory) :
    (global = global || self, factory(global.Rsk3Net = {}, global.web3CoreHelpers, global.Utils, global._classCallCheck, global._possibleConstructorReturn, global._getPrototypeOf, global._inherits, global.web3CoreMethod, global._regeneratorRuntime, global._asyncToGenerator, global._createClass, global.web3Core, global.isFunction));
}(this, (function (exports, web3CoreHelpers, Utils, _classCallCheck, _possibleConstructorReturn, _getPrototypeOf, _inherits, web3CoreMethod, _regeneratorRuntime, _asyncToGenerator, _createClass, web3Core, isFunction) { 'use strict';

    _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;
    _possibleConstructorReturn = _possibleConstructorReturn && Object.prototype.hasOwnProperty.call(_possibleConstructorReturn, 'default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;
    _getPrototypeOf = _getPrototypeOf && Object.prototype.hasOwnProperty.call(_getPrototypeOf, 'default') ? _getPrototypeOf['default'] : _getPrototypeOf;
    _inherits = _inherits && Object.prototype.hasOwnProperty.call(_inherits, 'default') ? _inherits['default'] : _inherits;
    _regeneratorRuntime = _regeneratorRuntime && Object.prototype.hasOwnProperty.call(_regeneratorRuntime, 'default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && Object.prototype.hasOwnProperty.call(_asyncToGenerator, 'default') ? _asyncToGenerator['default'] : _asyncToGenerator;
    _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;
    isFunction = isFunction && Object.prototype.hasOwnProperty.call(isFunction, 'default') ? isFunction['default'] : isFunction;

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
    var MethodFactory = function (_AbstractMethodFactor) {
      _inherits(MethodFactory, _AbstractMethodFactor);
      var _super = _createSuper(MethodFactory);
      function MethodFactory(utils, formatters) {
        var _this;
        _classCallCheck(this, MethodFactory);
        _this = _super.call(this, utils, formatters);
        _this.methods = {
          getId: web3CoreMethod.VersionMethod,
          getBlockByNumber: web3CoreMethod.GetBlockByNumberMethod,
          isListening: web3CoreMethod.ListeningMethod,
          getPeerCount: web3CoreMethod.PeerCountMethod
        };
        return _this;
      }
      return MethodFactory;
    }(web3CoreMethod.AbstractMethodFactory);

    function _createSuper$1(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct$1()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
    function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
    var Network = function (_AbstractWeb3Module) {
      _inherits(Network, _AbstractWeb3Module);
      var _super = _createSuper$1(Network);
      function Network(provider, methodFactory, utils, formatters, options, nodeNet) {
        var _this;
        _classCallCheck(this, Network);
        _this = _super.call(this, provider, options, methodFactory, nodeNet);
        _this.utils = utils;
        _this.formatters = formatters;
        return _this;
      }
      _createClass(Network, [{
        key: "getNetworkType",
        value: function () {
          var _getNetworkType = _asyncToGenerator( _regeneratorRuntime.mark(function _callee(callback) {
            var id, networkType;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return this.getId();
                  case 3:
                    id = _context.sent;
                    networkType = 'private';
                    _context.t0 = id;
                    _context.next = _context.t0 === 30 ? 8 : _context.t0 === 31 ? 10 : _context.t0 === 33 ? 12 : 14;
                    break;
                  case 8:
                    networkType = 'main';
                    return _context.abrupt("break", 14);
                  case 10:
                    networkType = 'testnet';
                    return _context.abrupt("break", 14);
                  case 12:
                    networkType = 'regtest';
                    return _context.abrupt("break", 14);
                  case 14:
                    if (isFunction(callback)) {
                      callback(null, networkType);
                    }
                    return _context.abrupt("return", networkType);
                  case 18:
                    _context.prev = 18;
                    _context.t1 = _context["catch"](0);
                    if (isFunction(callback)) {
                      callback(_context.t1, null);
                    }
                    throw _context.t1;
                  case 22:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[0, 18]]);
          }));
          function getNetworkType(_x) {
            return _getNetworkType.apply(this, arguments);
          }
          return getNetworkType;
        }()
      }]);
      return Network;
    }(web3Core.AbstractWeb3Module);

    function Network$1(provider) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Network(provider, new MethodFactory(Utils, web3CoreHelpers.formatters), Utils, web3CoreHelpers.formatters, options, null);
    }

    exports.Network = Network$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
